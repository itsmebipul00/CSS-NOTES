pixels - print css
relative
perrcent - wrt parent, widths
wrt vp- vmin, vmax, 
wrt font szies- em(parent container), rem(root html)

margins
can collapse anytime they touch each other
if first child in an element has margin top, that can merge with parents margin top
out here we can add padding on the parent to prevent parents margin from merging with the childs
you can only nest other inline elements inside inline elements
inline elements will only respect margin and padding placed on left and right

styling links
links have different states that we can style:
*default link state => a:link
*hover => a:hover
*visited => a:focus
*hover => a:hover
*active => a:active

shorthand propertities goes clockwise: top right bottom left

sometimes we need something which is inline but we can set the margin and padding, so here we can use display:inline-block

while styling buttons put class directly on the link and always use padding to create the size of the button not width and height
padding on left and right generally need to be larger than the top and the bottom(1:2 ratio generally)

The more specific the selectors are higher the priority, from lowest to highest:
i. element selector, class selector and id selector

approaching specificity:
general rules put on the element selectors eg. body, paragraphs, headings and rest of eerything else gets a class

Compound selectors and specificity
element= 1point class= 10points id= 100points

to avoid unintented specificity clashes avoid using compound selectors instead give everything a single class.
Instead of using compound selectors use multiple generic classes in your html element(follows DRY principle)

While using google fonts, fonts need to be downloaded which can be slow and fonts can shift(FOUT-FLASH OF UNSTYLED TEXT). So downloading only what yo need to use helps.

Links have default style set on them(blue color and underlined text-decoration ) so they do not inherit their parent property.
Likewise, headings are bold by default so they dont inherit font-weight. To change these you will have to overwrite this explicitly. You could also use color:inherit property for links in this case which makes the color of the link inherit from its parent.
We always want the last element of something not to have the extra spacing. 

justify content on vertical axis (space bw space around space evenly: applied to flex childerns)
align items on horixonal axis(flex-start center etc): everything is shrunk to fit the content whats inside of it.

media queries let us add new targets that target specific conditions
@media media-type and (media-features){...}
medai features are specific things about the media types
types:
screen
print
speech

featurs:
widths, orientation, specific features(like hover)
orientation: landscape means that when it is wider than its tall and potrait means when it is taller than it is wide(switching heights)
by default flex direstion is row which menas that parent is a row and its children are all columns

media queries should always come after the defult selector you have
text align center will always center text within its parent

while writing markup focus on the complicated part of the design, while doing css focus on the mobile first
there should usually be only one main tag per page

max-width:570px, means that it has has a maximum size of 570px but it is very happpy to shrink down
padding, margin => em, font-sizes=> rem
1rem = 16px
value in em= value in px / fontsize in rem * 16 (value in px)
when we give max-width to the image, which means if the parent is smaller than the image, the image shrinks with it. This is v.imp 
max-width/height means it is allowed to be smaller than the given value, while min-width/height means it is allowed to be larger than the the given value
with widths its usually max, with heights it is min(ex: 100vh)

align for cross axis
justify for main axis
adding line-height of 1.6 to your body makes things look really cool 

working with background images
if there is text on top of a image use background image
background-position: center and b-size: cover

h1 + p=> immediate sibling of h1
h1 ~ p => all parags siblings after h1

always add a background-color while using backgrounf-image 

