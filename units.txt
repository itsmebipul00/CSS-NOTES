pixels - print css
relative
perrcent - wrt parent, widths
wrt vp- vmin, vmax, 
wrt font szies- em(parent container), rem(root html)

margins
can collapse anytime they touch each other
if first child in an element has margin top, that can merge with parents margin top
out here we can add padding on the parent to prevent parents margin from merging with the childs
you can only nest other inline elements inside inline elements
inline elements will only respect margin and padding placed on left and right

styling links
links have different states that we can style:
*default link state => a:link
*hover => a:hover
*visited => a:focus
*hover => a:hover
*active => a:active

shorthand propertities goes clockwise: top right bottom left

sometimes we need something which is inline but we can set the margin and padding, so here we can use display:inline-block

while styling buttons put class directly on the link and always use padding to create the size of the button not width and height
padding on left and right generally need to be larger than the top and the bottom(1:2 ratio generally)

The more specific the selectors are higher the priority, from lowest to highest:
i. element selector, class selector and id selector

approaching specificity:
general rules put on the element selectors eg. body, paragraphs, headings and rest of eerything else gets a class

Compound selectors and specificity
element= 1point class= 10points id= 100points

to avoid unintented specificity clashes avoid using compound selectors instead give everything a single class.
Instead of using compound selectors use multiple generic classes in your html element(follows DRY principle)

While using google fonts, fonts need to be downloaded which can be slow and fonts can shift(FOUT-FLASH OF UNSTYLED TEXT). So downloading only what yo need to use helps.

Links have default style set on them(blue color and underlined text-decoration ) so they do not inherit their parent property.
Likewise, headings are bold by default so they dont inherit font-weight. To change these you will have to overwrite this explicitly. You could also use color:inherit property for links in this case which makes the color of the link inherit from its parent.
We always want the last element of something not to have the extra spacing. 

justify content on vertical axis (space bw space around space evenly: applied to flex childerns)
align items on horixonal axis(flex-start center etc): everything is shrunk to fit the content whats inside of it.

media queries let us add new targets that target specific conditions
@media media-type and (media-features){...}
medai features are specific things about the media types
types:
screen
print
speech

featurs:
widths, orientation, specific features(like hover)
orientation: landscape means that when it is wider than its tall and potrait means when it is taller than it is wide(switching heights)
by default flex direstion is row which menas that parent is a row and its children are all columns

media queries should always come after the defult selector you have
text align center will always center text within its parent

while writing markup focus on the complicated part of the design, while doing css focus on the mobile first
there should usually be only one main tag per page

max-width:570px, means that it has has a maximum size of 570px but it is very happpy to shrink down
padding, margin => em, font-sizes=> rem
1rem = 16px
value in em= value in px / fontsize in rem * 16 (value in px)
when we give max-width to the image, which means if the parent is smaller than the image, the image shrinks with it. This is v.imp 
max-width/height means it is allowed to be smaller than the given value, while min-width/height means it is allowed to be larger than the the given value
with widths its usually max, with heights it is min(ex: 100vh)

align for cross axis
justify for main axis
adding line-height of 1.6 to your body makes things look really cool 

working with background images
if there is text on top of a image use background image
background-position: center and b-size: cover

h1 + p=> immediate sibling of h1
h1 ~ p => all parags siblings after h1

always add a background-color while using backgrounf-image 
viewport units are resposive units
vmin, vmax, vw, vh

by default box-sizing is content-box
when we change it to border-box, it means that padding and border are inncluded in the total width of something instead of being added on top of that width 

Flexbox
flex-wrap is default to no-wrap, setting it to wrap makes the flex-items fit inside the border
default for align-items is strech (apply a min-height on the flex container to see the effect visually)
if you switch the flex-direction the roles of justify-content and align-items also do (basiclally entire flex container switches the axis they are initially on)
align-content works with all of the content of the container while align-items works on an individual row/column
align-content and justify-content work similarly apart from the fact that they work on opposite axis
flex-grow by default is 0, flex-grow increases the flex-item faster. same with flex-shrink but its default is 1. increses and decrease in different rates
when flex-direction is row, main axis is x-axis and cross axis is is y-axis, vice versa
When flex-direction is row, flex-basis controls width but when flex-direction is column, flex-basis controls height. if you're in flex-direction: column, the width property would be needed for sizing flex items horizontally and vice versa
flex: grow, shrink, basis
defaulT: 0, 1, auto , it does not grow , it will shrink and it will automatically look at its width
0 => if it hits its desired width, it will not grow
1 => shrinking at a normal rate
auto => default to its(content's) width
flex: 1 => /* grow: 1, flex-basis: 0 */
basis: 0 means to shrink as much as possible
flex: auto => flex: 1 1 auto;
align-self works on the flex-item

setting margin top and bottom to auto will center vertically 
object fit (in cover it gets clipped according to its dimensions)
contain - The image keeps its aspect ratio, but is resized to fit within the given dimension
cover - The image keeps its aspect ratio and fills the given dimension. The image will be clipped to fit
**always keep in mind to use space-between like propertities instead of margin

parent-flex childrens-basis:100% => ensures all direct children of parent are equal width.
parent-flex, wrap childrens-flex:1 1 10em => grid layout where columns of different rows can be of different widths
parent-flex, wrap children> *:nth-child(1): flex: 1 1 70%, min-width:25ch && children> *:nth-child(2): flex: 1 1 30%, min-width: 15ch => content and sidebar with no media queries

limitation of flexbox
deals with only 1d at a time i.e either we will be working on a vertical direction or horizontal direction at a time

grid allows us to split the parent element into both rows and columns
margin no longer collapse and the direct children will be grid items

anytime you define the column in grid, you are defining the width of the column
and anytime you define row you are defining the height of each row
grid-template-columns, grid-template-rows
grid-template: 100px 400px / 250px 250px 250px; //shorthand rows/columns

to tell the grid-items explicitly where they should be placed we use:
grid-column-start, grid-column-end, grid-row-start, grid-row-end
shorthand
grid-row: start/end
grid:column: start/end

grids overlap if they find space and if you have explicitly mentioned it
grid-column: 1/-1 => strech all the way from begining to the end

Much easier than counting column nos
grid-column: 2 / span 2; => start at 2 , span 2 colms horizontally and then end
grid-row: span 2; => just span 2wice vertically

auto keyword matches the height/width of the content
if we dont declare the grid-template-row/column is auto

justify-self, align-self for positioning individual items
justify-items, align-items for positioning all grid items horizonatally/ vertically respectively

Applied to parent grid
grid-column-gap: 2em;
grid-row-gap: 5em;

When we declare display: grid on a parent element, automatically grid items fall into rows
If you dont explicitly create rows and colums for grid items though they exist, they are implicitly created and defaulted to auto(height and width of the content)
Changing dimensions of implicit grids:
grid-auto-rows, grid-auto-columns

Grid Area
.main-content{
grid-area: content;
}

minmax
grid-template-columns: 100px minmax(200px, 500px) minmax(100px, 200px) 100px;
minmax(minwidth, maxwidth)

fr unit
1fr => flex: 1 1 auto (grow as much as all the cotent occupies all the width)
fr doesnt work as a minwidth
grid-template-columns: 250px minmax(50px, 1fr) 1fr;

repeat() => multiple cols of same width
grid-template-columns: 200px repeat(3, 1fr); instead of 3 while using repeat we can use auto-fit(fit colms even if empty) and auto-fill(add new colms only when not empty i.e fit cols in the available space) as well

//add new cols while expanding screen size, if a col of atleast 200px can fit in(even if empty)
grid-template-columns: repeat(auto-fill, minmax(200px, 1fr));

//add new cols while expanding screen size, if a col of atleast 200px can fit in(not an empty one though)
grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
---------------------------------------------------------------
The .sr-only class hides an element to all devices except screen readers i.e it will be visible in the DOM but not on the screen unlike display: none property which removes it from the DOM.

.flow > * + * { //this is same as .flow > *:not(:first-child)
    margin-top: 1rem;
    outline: 1px solid red;
}

.card h1,
.card h2,
.card h3

aspect-ratio: 2 / 1; => twicw as wide as it is high
place-items: center; => shorthand for align items and justify items

aria => assesible rich internet applications

Pseudo elements and Pseudo class
: pc- deals with state
:: pe- selecting only part of an element

p::before - before all content of the paragraph
pseudo elements on images dont work
pseudo elements are inline by default
before and after are especially used for design elements

keep in mind of the stacking context while using z-index
margin-left/right/top/bottom: auto (l/r->row, t/b->col) creates huge margin on t/l/b/r
margins dont collapse in flex format

inline The element doesn’t start on a new line and only occupy just the width it requires. You can’t set the width or height.
inline-block It’s formatted just like the inline element, where it doesn’t start on a new line. BUT, you can set width and height values.
block The element will start on a new line and occupy the full width available. And you can set width and height values.

